config_parser {
  # Whether to replace commented out defaults when updating configuration files.
  # For example, in `/etc/pacman.conf`, '#ParallelDownloads = 5' is commented out by default,
  # but if 'packages/pacman/parallel_downloads = 10' is set, then the commented out line will be replaced.
  replace_comments = true
}

essentials {
  # The command to use for privilege escalation.
  privilege_escalation = sudo

  # The top kernel is the default kernel.
  # The kernels will be installed in reverse order so that the top kernel is the default.
  # The last kernel is treated as if it has the `+bare` tag.
  # If a kernel package from the AUR is required, then the package must be the last kernel in the AUR section.
  # Remember to add the kernel headers and firmware packages if necessary.
  kernel = linux

  network_handler = networkmanager
  bootloader = grub efibootmgr
}

packages {
  pacman {
    color = true
    parallel_downloads = 10
    verbose_pkg_lists = false
    i_love_candy = false

    # Repositories must specify a name, and can also specify a server and include (not required for official repositories).
    repository {
      name = core
    }
    repository {
      name = extra
    }
    # repository {
    #   name = multilib
    # }

    package = man-db man-pages texinfo, +bare
    package = linux-headers linux-firmware, +bare

    package = neovim, +bare
    package = nano, +bare
    package = bash
    package = sddm
    package = firefox

    # hook {
    #   package = rustup
    #   for = install  # "install" or "remove"
    #   timing = after # "before" or "after"
    #   user = myuser
    #   run = rustup toolchain install stable
    # }
  }

  aur {
    # Pacman wrapper to install AUR packages.
    # If set to `makepkg`, then the `makepkg` command is used to install AUR packages.
    # Otherwise, the specified helper is installed with makepkg.
    # Defaults to `makepkg`.
    helper = makepkg

    # hook {
    #   package = some-aur-package
    #   for = install  # "install" or "remove"
    #   timing = after # "before" or "after"
    #   user = myuser
    #   run = some command to run
    # }
  }

  flatpak {
    # Whether to automatically install Flatpak if it is not already installed.
    # Should be set to `false` to use a different package providing Flatpak.
    # Defaults to true.
    auto_install = true

    # Remotes must specify a name and URL.
    # Flatpak's `--user` and `--installation` flags can be used with `user_installation` and `installation`.
    # Remotes can also specify `title`, `comment`, `description`, `homepage`, `icon`, and `default_branch`.
    # Flathub is included by default on Arch Linux.
    # remote {
    #   name = flathub
    #   url = https://dl.flathub.org/repo/flathub.flatpakrepo
    # }

    # Flatpak packages can be defined as a field similarly to other package managers.
    package = com.github.tchx84.Flatseal

    # Packages can also be defined in a `package` section for more complex configurations.
    # The `name` field is required, and can be used identically to the `package` field.
    # Flatpak's `--user` and `--installation` flags can be used with `user_installation` and `installation`.
    # Packages can also specify `architecture` and `subpath`.
    # package {
    #   name = com.github.tchx84.Flatseal
    # }

    # hook {
    #   package = com.some.flatpak
    #   for = install  # "install" or "remove"
    #   timing = after # "before" or "after"
    #   user = myuser
    #   run = some command to run
    # }
  }
}

users {
  # The top user is the primary user unless the `primary` field is set to false.
  # The `full_name` field is optional.
  # The `sudoer` field defaults to false. It adds the user to the `wheel` group.
  # If no users are sudoers, then the wheel group having sudo access is automatically disabled if it is not explicitly enabled.
  # If no `shell` field is set, the defined default shell is used.

  # user {
  #   username = myuser
  #   full_name = "My User"
  #   shell = zsh
  #   sudoer = true
  # 
  #   group = docker
  # }

  # You can explicitly enable or disable the wheel group's sudo access with the `wheel_sudo` field.
  # This will cause the `wheel` group to have sudo access regardless of if any users are sudoers.
  # wheel_sudo = true
}

# Applications can be known values (like `neovim`) or executables (like `nvim` or `/usr/bin/nvim`).
applications {
  # display_manager = sddm

  shell = bash
  # terminal = kitty
  terminal_text_editor = neovim
  graphical_text_editor = neovim
  browser = firefox
}
